package com.iuvity.service;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.iuvity.dao.IAdminDAO;
import com.iuvity.domain.Admin;
import com.iuvity.payload.JwtResponse;
import com.iuvity.payload.LoginRequest;
import com.iuvity.payload.MessageResponse;
import com.iuvity.payload.RequestRegistrar;
import com.iuvity.security.jwt.JwtUtils;
import com.iuvity.security.service.UserDetailsImpl;

@Service
public class AdminService implements IAdminService {

	@Autowired
	private IAdminDAO dao;
	
	@Autowired
	AuthenticationManager authenticationManager;

	@Autowired
	JwtUtils jwtUtils;
	
	@Override
	public Admin consultarAdminPorUsuario(String usuario) {
		return dao.findByUsuario(usuario);
	}

	@Override
	public Admin consultarAdminPorCedulaYUsuario(Integer cedula, String usuario) {
		return dao.findByCedulaAndUsuario(cedula, usuario);
	}

	@Override
	public Admin guardarAdmin(Admin admin) {
		return dao.save(admin);
	}

	@Override
	public ResponseEntity<?> loginAdmin(LoginRequest loginRequest) {
		Authentication authentication = authenticationManager.authenticate(
				new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));

		SecurityContextHolder.getContext().setAuthentication(authentication);

		String jwt = jwtUtils.generateJwtToken(authentication);

		UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();

		List<String> roles = userDetails.getAuthorities().stream().map(item -> item.getAuthority())
				.collect(Collectors.toList());

		return ResponseEntity.ok(new JwtResponse(jwt, userDetails.getNombre(), userDetails.getUsuario(), roles));
	}

	@Override
	public ResponseEntity<?> registrarAdmin(RequestRegistrar request) {
		try {
			// Validar que el admin no exista
			Admin admin = consultarAdminPorCedulaYUsuario(request.getCedula(), request.getUsuario());

			if (admin != null) {
				return ResponseEntity.badRequest().body(new MessageResponse("Error: El administrador ya se encuentra creado"));
			}

			// Almacenar usuario
			admin = new Admin(request.getCedula(), request.getNombre(), request.getUsuario(), new BCryptPasswordEncoder().encode(request.getPassword()));
			admin = guardarAdmin(admin);
			
			if (admin == null) {
				return ResponseEntity.badRequest().body(new MessageResponse("Error: Por favor reintente registrar el usuario nuevamente"));
			}
		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
		
		
		return ResponseEntity.ok(new MessageResponse("Usuario registrado con Ã©xito"));
	}

}
