package com.iuvity.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.iuvity.payload.JwtResponse;
import com.iuvity.payload.LoginRequest;
import com.iuvity.payload.MessageResponse;
import com.iuvity.payload.RequestRegistrar;
import com.iuvity.security.jwt.JwtUtils;
import com.iuvity.security.service.UserDetailsImpl;
import com.iuvity.service.IAdminService;

import org.springframework.http.ResponseEntity;

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.RequestBody;

import java.rmi.UnexpectedException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.validation.Valid;

import com.iuvity.domain.Admin;

@RestController
@RequestMapping("/Admin")
@CrossOrigin(origins = "http://localhost:4200", methods = { RequestMethod.GET, RequestMethod.POST },
	allowedHeaders = {}, maxAge = 3600)
public class AdminController {

	@Autowired
	IAdminService ias;

	@Autowired
	AuthenticationManager authenticationManager;

	@Autowired
	JwtUtils jwtUtils;
	
	@CrossOrigin
	@GetMapping("/validarToken")
	public ResponseEntity<?> validarToken(){
		Map<String, Boolean> resp = new HashMap<String, Boolean>();
		resp.put("Validado", true);
		return ResponseEntity.ok(resp);
	}

	/**
	 * Servicio para el logueo de administradores.
	 * 
	 * @param loginRequest
	 * @return Json con token y datos de usuario.
	 */
	@PostMapping("/login")
	public ResponseEntity<?> login(@Valid @RequestBody LoginRequest loginRequest) {
		Authentication authentication = authenticationManager.authenticate(
				new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));

		SecurityContextHolder.getContext().setAuthentication(authentication);

		String jwt = jwtUtils.generateJwtToken(authentication);

		UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();

		List<String> roles = userDetails.getAuthorities().stream().map(item -> item.getAuthority())
				.collect(Collectors.toList());

		return ResponseEntity.ok(new JwtResponse(jwt, userDetails.getNombre(), userDetails.getUsuario(), roles));
	}

	@PostMapping("/registrar")
	public ResponseEntity<?> registerUser(@Valid @RequestBody RequestRegistrar sr) throws UnexpectedException {

		try {
			// Validar que el admin no exista
			Admin admin = ias.consultarAdminPorCedulaYUsuario(sr.getCedula(), sr.getUsuario());

			if (admin != null) {
				return ResponseEntity.badRequest().body(new MessageResponse("Error: El administrador ya se encuentra creado"));
			}

			// Almacenar usuario
			admin = new Admin(sr.getCedula(), sr.getNombre(), sr.getUsuario(), new BCryptPasswordEncoder().encode(sr.getPassword()));
			admin = ias.guardarAdmin(admin);
			
			if (admin == null) {
				return ResponseEntity.badRequest().body(new MessageResponse("Error: Por favor reintente registrar el usuario nuevamente"));
			}
		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
		
		
		return ResponseEntity.ok(new MessageResponse("Usuario registrado con Ã©xito"));
	}
}
